name: Python CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest

    steps:
      # Checkout del código fuente
      - name: Checkout Code
        uses: actions/checkout@v4

      # Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Instalar dependencias
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt -r requirements/requirements-test.txt

      # Ejecutar unit tests con pytest
      - name: Run Unit Tests
        run: |
          PYTHONPATH=. pytest tests/ --cov=app --cov-report=xml:coverage.xml

      # Verificar estilo de código con pycodestyle
      - name: Run pycodestyle
        run: |
          pycodestyle --max-line-length 120 app/ > pycodestyle.txt || true
        continue-on-error: true

      # Analizar código con pylint
      - name: Run pylint
        run: |
          pylint --max-line-length 120 app/ > pylint.txt || true
        continue-on-error: true

      # Subir resultados de cobertura como artefacto
      - name: Upload Coverage and Lint Reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            coverage.xml
            pylint.txt
            pycodestyle.txt

  build-and-push-docker:
    # Este job solo se ejecuta manualmente o si se activa la opción
    needs: test-and-analyze
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      # Checkout del código fuente
      - name: Checkout Code
        uses: actions/checkout@v4

      # Login a DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build de la imagen Docker
      - name: Build Docker Image
        run: |
          docker build -t alejandroadrados/f1-webapp:latest .

      # Push de la imagen Docker
      - name: Push Docker Image
        run: |
          docker push alejandroadrados/f1-webapp:latest
